services:
  # ============================================
  # Base de données PostgreSQL
  # ============================================
  db:
    image: postgres:16-alpine
    container_name: secureapp_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: secureapp
      POSTGRES_PASSWORD: secureapp
      POSTGRES_DB: secureapp
    volumes:
      - db_data_prod:/var/lib/postgresql/data
      - ./backend/src/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - secure_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U secureapp"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Backend Node.js (API Express + JWT + HTTPS)
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: secureapp_backend_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://secureapp:secureapp@db:5432/secureapp
      JWT_SECRET: mon_secret_jwt_super_long_et_complexe_changez_moi
      JWT_EXPIRATION: 15m
      REFRESH_EXPIRATION: 7d
      FRONTEND_URL: http://localhost:8080
    volumes:
      - ./backend/certs:/app/certs:ro
    ports:
      - "4000:4000"
    networks:
      - secure_net
    healthcheck:
      test: ["CMD", "node", "-e", "require('https').get('https://localhost:4000/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Frontend Angular (servi via Nginx)
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: secureapp_frontend_prod
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "8080:80"
    networks:
      - secure_net

  # ============================================
  # Adminer (interface web de gestion PostgreSQL)
  # ============================================
  adminer:
    image: adminer:latest
    container_name: secureapp_adminer_prod
    restart: unless-stopped
    depends_on:
      - db
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    networks:
      - secure_net

# ============================================
# Volumes persistants
# ============================================
volumes:
  db_data_prod:

# ============================================
# Réseaux
# ============================================
networks:
  secure_net:
    driver: bridge